generator client {
  provider = "prisma-client-js"
  previewFeatures = ["fullTextSearch", "views"]
}

datasource db {
  provider = "sqlite"
  url      = env("DATABASE_URL")
}

model User {
  id                String   @id @default(uuid())
  email             String   @unique
  passwordHash      String?  @map("password_hash")
  username          String?  @unique
  displayName       String?  @map("display_name")
  avatar            String?
  bio               String?
  isVerified        Boolean  @default(false) @map("is_verified")
  reputation        Int      @default(0)
  totalPolls        Int      @default(0) @map("total_polls")
  totalVotes        Int      @default(0) @map("total_votes")
  streakDays        Int      @default(0) @map("streak_days")
  lastActiveAt      DateTime? @map("last_active_at")
  preferredLanguage String   @default("en") @map("preferred_language")
  provider          String?  // oauth provider
  providerId        String?  @map("provider_id")
  isBot             Boolean  @default(false) @map("is_bot")
  isModerator       Boolean  @default(false) @map("is_moderator")
  createdAt         DateTime @default(now()) @map("created_at")
  updatedAt         DateTime @updatedAt @map("updated_at")

  // Relations
  polls           Poll[]
  votes           Vote[]
  comments        Comment[]
  predictions     Prediction[]
  achievements    UserAchievement[]
  followers       Follow[] @relation("UserFollowers")
  following       Follow[] @relation("UserFollowing")
  notifications   Notification[]
  moderationLogs  ModerationLog[]
  reportsMade     Report[] @relation("ReportedBy")
  reportsReceived Report[] @relation("ReportedUser")

  @@index([reputation])
  @@index([totalPolls])
  @@index([lastActiveAt])
  @@map("users")
}

model Category {
  id          String   @id @default(uuid())
  slug        String   @unique
  icon        String?
  color       String?
  orderIndex  Int      @default(0) @map("order_index")
  isActive    Boolean  @default(true) @map("is_active")
  createdAt   DateTime @default(now()) @map("created_at")

  // Relations
  polls                Poll[]
  categoryTranslations CategoryTranslation[]

  @@map("categories")
}

model CategoryTranslation {
  id          String @id @default(uuid())
  categoryId  String @map("category_id")
  language    String
  name        String
  description String?

  // Relations
  category Category @relation(fields: [categoryId], references: [id], onDelete: Cascade)

  @@unique([categoryId, language])
  @@map("category_translations")
}

model Poll {
  id               String    @id @default(uuid())
  creatorId        String    @map("creator_id")
  categoryId       String    @map("category_id")
  originalLanguage String    @map("original_language")
  expiresAt        DateTime? @map("expires_at")
  resolvedAt       DateTime? @map("resolved_at")
  resolutionResult String?   @map("resolution_result")
  resolutionSource String?   @map("resolution_source")
  isActive         Boolean   @default(true) @map("is_active")
  isTrending       Boolean   @default(false) @map("is_trending")
  isFeatured       Boolean   @default(false) @map("is_featured")
  isPinned         Boolean   @default(false) @map("is_pinned")
  sourceType       String    @default("USER") @map("source_type") // USER, AI, NEWS, API
  newsSourceUrl    String?   @map("news_source_url")
  difficulty       String    @default("EASY") @map("difficulty") // EASY, MEDIUM, HARD
  totalVotes       Int       @default(0) @map("total_votes")
  totalComments    Int       @default(0) @map("total_comments")
  totalShares      Int       @default(0) @map("total_shares")
  trendingScore    Float     @default(0) @map("trending_score")
  qualityScore     Float     @default(0) @map("quality_score")
  aiGenerated      Boolean   @default(false) @map("ai_generated")
  aiModel          String?   @map("ai_model")
  aiConfidence     Float?    @map("ai_confidence")
  metadata         Json?
  tags             String[]  @default([])
  createdAt        DateTime  @default(now()) @map("created_at")
  updatedAt        DateTime  @updatedAt @map("updated_at")

  // Relations
  creator           User                @relation(fields: [creatorId], references: [id])
  category          Category            @relation(fields: [categoryId], references: [id])
  pollTranslations  PollTranslation[]
  options           PollOption[]
  votes             Vote[]
  comments          Comment[]
  voteSnapshots     VoteSnapshot[]
  predictions       Prediction[]
  reports           Report[]
  analytics         PollAnalytics[]

  @@index([categoryId, createdAt])
  @@index([isTrending, trendingScore])
  @@index([isFeatured, createdAt])
  @@index([expiresAt])
  @@index([totalVotes])
  @@index([tags])
  @@map("polls")
}

model PollTranslation {
  id                   String  @id @default(uuid())
  pollId               String  @map("poll_id")
  language             String
  title                String
  description          String?
  isMachineTranslated  Boolean @default(false) @map("is_machine_translated")
  createdAt            DateTime @default(now()) @map("created_at")

  // Relations
  poll Poll @relation(fields: [pollId], references: [id], onDelete: Cascade)

  @@unique([pollId, language])
  @@map("poll_translations")
}

model PollOption {
  id               String   @id @default(uuid())
  pollId           String   @map("poll_id")
  orderIndex       Int      @map("order_index")
  originalLanguage String   @map("original_language")
  createdAt        DateTime @default(now()) @map("created_at")

  // Relations
  poll                     Poll                      @relation(fields: [pollId], references: [id], onDelete: Cascade)
  pollOptionTranslations   PollOptionTranslation[]
  votes                    Vote[]
  voteSnapshots            VoteSnapshot[]
  predictions              Prediction[]

  @@index([pollId])
  @@map("poll_options")
}

model PollOptionTranslation {
  id                  String  @id @default(uuid())
  optionId            String  @map("option_id")
  language            String
  text                String
  isMachineTranslated Boolean @default(false) @map("is_machine_translated")

  // Relations
  option PollOption @relation(fields: [optionId], references: [id], onDelete: Cascade)

  @@unique([optionId, language])
  @@map("poll_option_translations")
}

model Vote {
  id        String   @id @default(uuid())
  pollId    String   @map("poll_id")
  optionId  String   @map("option_id")
  userId    String?  @map("user_id")
  sessionId String?  @map("session_id")
  ipAddress String   @map("ip_address")
  createdAt DateTime @default(now()) @map("created_at")

  // Relations
  poll   Poll       @relation(fields: [pollId], references: [id], onDelete: Cascade)
  option PollOption @relation(fields: [optionId], references: [id], onDelete: Cascade)
  user   User?      @relation(fields: [userId], references: [id])

  @@unique([pollId, userId])
  @@unique([pollId, sessionId])
  @@map("votes")
}

model VoteSnapshot {
  id           String   @id @default(uuid())
  pollId       String   @map("poll_id")
  optionId     String   @map("option_id")
  voteCount    Int      @map("vote_count")
  totalVotes   Int      @map("total_votes")
  percentage   Float
  snapshotDate DateTime @map("snapshot_date")
  createdAt    DateTime @default(now()) @map("created_at")

  // Relations
  poll   Poll       @relation(fields: [pollId], references: [id], onDelete: Cascade)
  option PollOption @relation(fields: [optionId], references: [id], onDelete: Cascade)

  @@unique([pollId, optionId, snapshotDate])
  @@map("vote_snapshots")
}

model Comment {
  id               String    @id @default(uuid())
  pollId           String    @map("poll_id")
  parentId         String?   @map("parent_id")
  userId           String?   @map("user_id")
  isAnonymous      Boolean   @default(false) @map("is_anonymous")
  originalLanguage String    @map("original_language")
  isFlagged        Boolean   @default(false) @map("is_flagged")
  isDeleted        Boolean   @default(false) @map("is_deleted")
  createdAt        DateTime  @default(now()) @map("created_at")
  updatedAt        DateTime  @updatedAt @map("updated_at")

  // Relations
  poll                 Poll                 @relation(fields: [pollId], references: [id], onDelete: Cascade)
  parent               Comment?             @relation("CommentReplies", fields: [parentId], references: [id])
  replies              Comment[]            @relation("CommentReplies")
  user                 User?                @relation(fields: [userId], references: [id])
  commentTranslations  CommentTranslation[]
  reports              Report[]

  @@index([pollId])
  @@index([userId])
  @@index([createdAt])
  @@map("comments")
}

model CommentTranslation {
  id                  String  @id @default(uuid())
  commentId           String  @map("comment_id")
  language            String
  content             String
  isMachineTranslated Boolean @default(false) @map("is_machine_translated")

  // Relations
  comment Comment @relation(fields: [commentId], references: [id], onDelete: Cascade)

  @@unique([commentId, language])
  @@map("comment_translations")
}


// Market-style and advanced features
model Prediction {
  id          String   @id @default(uuid())
  userId      String   @map("user_id")
  pollId      String   @map("poll_id")
  optionId    String   @map("option_id")
  confidence  Float    // 0.0 to 1.0
  reasoning   String?
  points      Int      @default(0) // Points wagered
  payout      Int?     // Points won/lost
  isResolved  Boolean  @default(false) @map("is_resolved")
  createdAt   DateTime @default(now()) @map("created_at")
  resolvedAt  DateTime? @map("resolved_at")

  // Relations
  user   User       @relation(fields: [userId], references: [id])
  poll   Poll       @relation(fields: [pollId], references: [id])
  option PollOption @relation(fields: [optionId], references: [id])

  @@unique([userId, pollId])
  @@index([pollId, confidence])
  @@map("predictions")
}

model PollAnalytics {
  id              String   @id @default(uuid())
  pollId          String   @map("poll_id")
  date            DateTime
  totalViews      Int      @default(0) @map("total_views")
  uniqueVoters    Int      @default(0) @map("unique_voters")
  totalVotes      Int      @default(0) @map("total_votes")
  totalComments   Int      @default(0) @map("total_comments")
  totalShares     Int      @default(0) @map("total_shares")
  engagementRate  Float    @default(0) @map("engagement_rate")
  conversionRate  Float    @default(0) @map("conversion_rate")
  averageTime     Int      @default(0) @map("average_time") // seconds
  bounceRate      Float    @default(0) @map("bounce_rate")
  referralSources Json?    @map("referral_sources")
  demographics    Json?    
  createdAt       DateTime @default(now()) @map("created_at")

  // Relations
  poll Poll @relation(fields: [pollId], references: [id])

  @@unique([pollId, date])
  @@index([date])
  @@map("poll_analytics")
}

model Follow {
  id          String   @id @default(uuid())
  followerId  String   @map("follower_id")
  followingId String   @map("following_id")
  createdAt   DateTime @default(now()) @map("created_at")

  // Relations
  follower  User @relation("UserFollowers", fields: [followerId], references: [id])
  following User @relation("UserFollowing", fields: [followingId], references: [id])

  @@unique([followerId, followingId])
  @@index([followerId])
  @@index([followingId])
  @@map("follows")
}

model Achievement {
  id          String @id @default(uuid())
  name        String @unique
  description String
  icon        String
  category    String
  rarity      String @default("COMMON") // COMMON, RARE, EPIC, LEGENDARY
  points      Int    @default(0)
  isActive    Boolean @default(true) @map("is_active")
  createdAt   DateTime @default(now()) @map("created_at")

  // Relations
  userAchievements UserAchievement[]

  @@map("achievements")
}

model UserAchievement {
  id            String   @id @default(uuid())
  userId        String   @map("user_id")
  achievementId String   @map("achievement_id")
  unlockedAt    DateTime @default(now()) @map("unlocked_at")
  progress      Int      @default(0)
  isCompleted   Boolean  @default(false) @map("is_completed")

  // Relations
  user        User        @relation(fields: [userId], references: [id])
  achievement Achievement @relation(fields: [achievementId], references: [id])

  @@unique([userId, achievementId])
  @@index([userId])
  @@map("user_achievements")
}

model Notification {
  id        String   @id @default(uuid())
  userId    String   @map("user_id")
  type      String   // POLL_RESOLVED, NEW_FOLLOWER, ACHIEVEMENT_UNLOCKED, etc.
  title     String
  message   String
  data      Json?    // Additional data
  isRead    Boolean  @default(false) @map("is_read")
  createdAt DateTime @default(now()) @map("created_at")

  // Relations
  user User @relation(fields: [userId], references: [id])

  @@index([userId, isRead])
  @@index([createdAt])
  @@map("notifications")
}

model Report {
  id          String   @id @default(uuid())
  reporterId  String?  @map("reporter_id")
  reportedId  String?  @map("reported_user_id")
  pollId      String?  @map("poll_id")
  commentId   String?  @map("comment_id")
  type        String   // SPAM, INAPPROPRIATE, HARASSMENT, etc.
  reason      String
  description String?
  status      String   @default("PENDING") // PENDING, REVIEWING, RESOLVED, DISMISSED
  moderatorId String?  @map("moderator_id")
  resolution  String?
  createdAt   DateTime @default(now()) @map("created_at")
  updatedAt   DateTime @updatedAt @map("updated_at")

  // Relations
  reporter User? @relation("ReportedBy", fields: [reporterId], references: [id])
  reported User? @relation("ReportedUser", fields: [reportedId], references: [id])
  poll     Poll? @relation(fields: [pollId], references: [id])
  comment  Comment? @relation(fields: [commentId], references: [id])

  @@index([status])
  @@index([createdAt])
  @@map("reports")
}

model ModerationLog {
  id          String   @id @default(uuid())
  moderatorId String   @map("moderator_id")
  targetType  String   @map("target_type") // USER, POLL, COMMENT
  targetId    String   @map("target_id")
  action      String   // BAN, WARN, DELETE, APPROVE, etc.
  reason      String
  duration    Int?     // For temporary actions (hours)
  metadata    Json?
  createdAt   DateTime @default(now()) @map("created_at")

  // Relations
  moderator User @relation(fields: [moderatorId], references: [id])

  @@index([targetType, targetId])
  @@index([createdAt])
  @@map("moderation_logs")
}

model TrendingTopic {
  id            String   @id @default(uuid())
  keyword       String   @unique
  category      String?
  mentions      Int      @default(0)
  sentiment     Float    @default(0) // -1 to 1
  momentum      Float    @default(0) // Rate of change
  region        String?
  language      String   @default("en")
  source        String   // NEWS, SOCIAL, API
  metadata      Json?
  lastUpdated   DateTime @default(now()) @map("last_updated")
  createdAt     DateTime @default(now()) @map("created_at")

  @@index([mentions])
  @@index([momentum])
  @@index([lastUpdated])
  @@map("trending_topics")
}

model SearchIndex {
  id          String   @id @default(uuid())
  entityType  String   @map("entity_type") // POLL, USER, COMMENT
  entityId    String   @map("entity_id")
  content     String   // Searchable text content
  keywords    String[] @default([])
  language    String   @default("en")
  boost       Float    @default(1.0) // Search ranking boost
  isActive    Boolean  @default(true) @map("is_active")
  updatedAt   DateTime @updatedAt @map("updated_at")

  @@unique([entityType, entityId])
  @@index([keywords])
  @@index([content])
  @@map("search_index")
}

model ApiKey {
  id          String   @id @default(uuid())
  name        String
  key         String   @unique
  permissions String[] @default([])
  rateLimit   Int      @default(1000) @map("rate_limit") // requests per hour
  isActive    Boolean  @default(true) @map("is_active")
  lastUsed    DateTime? @map("last_used")
  createdAt   DateTime @default(now()) @map("created_at")
  expiresAt   DateTime? @map("expires_at")

  @@index([key])
  @@map("api_keys")
}

model CacheEntry {
  id        String   @id @default(uuid())
  key       String   @unique
  value     Json
  ttl       Int      // Time to live in seconds
  createdAt DateTime @default(now()) @map("created_at")
  expiresAt DateTime @map("expires_at")

  @@index([expiresAt])
  @@map("cache_entries")
}

